Documentação sobre implementações novas no projeto PI 4 Semestre:

  1. Modelos para Tabelas de Vídeos e Palavra

  1.1 'videoModel.js'
    - Caminho: /src/models/videoModel.js
    - Propósito: Este arquivo é responsável por interagir com a tabela video no banco de dados.

    - Funções:
      - insertVideo(url): Insere uma nova URL de vídeo na tabela 'videos' e retorna o 'id' da entrada inserida.
      - getVideoByUrl(url): Retorna o ID do video com base na url fornecida

  script:
  const pool = require('../../config/db');

  async function insertVideo(url) {
    const [rows] = await pool.execute('INSERT INTO videos (url) VALUES (?)', [url]);
    return rows.insertId;
  }

  async function getVideoByUrl(url) {
    const [rows] = await pool.execute('SELECT id FROM videos WHERE url = ?', [url]);
    return rows[0];
  }

  module.exports = { insertVideo, getVideoByUrl };





1.2 significadoModel.js:
  - Caminho:  /src/models/significadoModel.js
  - Propósito: Responsável por interagir com a tabela 'significados', que contém textos e IDs de vídeos relacionados.

  -Funções:
    - insertSignificado(texto, videoId): Insere um novo texto associado a um vídeo.
    - getSignificadoByTexto(texto): Busca um significado com base no texto.

script:
const pool = require('../../config/db');

async function insertSignificado(texto, videoId) {
  await pool.execute('INSERT INTO significados (texto, video_id) VALUES (?, ?)', [texto, videoId]);
}

async function getSignificadoByTexto(texto) {
  const [rows] = await pool.execute('SELECT * FROM significados WHERE texto = ?', [texto]);
  return rows[0];
}

module.exports = { insertSignificado, getSignificadoByTexto };






2. Serviço de Banco de dados

2.1 databaseService.js
  - Caminho: /src/services/databaseService.js
  - Propósito: Gerenciar a interação entre os modelos de 'vídeo' e 'significado'

  - Função principal:
    - saveSignificado(texto, videoUrl): Verifica se o vídeo já existe, insere um novo vídeo se necessário, e associa um texto ao vídeo.

script:
const videoModel = require('../models/videoModel');
const significadoModel = require('../models/significadoModel');

async function saveSignificado(texto, videoUrl) {
  let video = await videoModel.getVideoByUrl(videoUrl);
  if (!video) {
    const videoId = await videoModel.insertVideo(videoUrl);
    video = { id: videoId };
  }

  const existingSignificado = await significadoModel.getSignificadoByTexto(texto);
  if (!existingSignificado) {
    await significadoModel.insertSignificado(texto, video.id);
  }
}

module.exports = { saveSignificado };


3. Controlador de Tradução

(OBS: Como eu acredito que essa essa seja a parte mais complicada de entender a lógica, vou dar um detalhamento maior de como funciona)


3.1 translateController
  - Caminho: /src/controllers/translateController.js

  - LÓGICA:
    - Função geral: A tradução, em vez de ser de texto para texto (como o 3Semestre), será de texto para vídeo. Quando o usuário insere uma frase ou palavras no
      campo de entrada, o sistema deve realizar a seguinte sequência de operações:

        1. Receber o texto do usuário: O texto digitado pelo usuário é enviado pelo formulário.

        2. Dividir o texto em palavras individuais: O sistema separa as palavras da frase inserida para buscar uma a uma no banco de dados.

        3. Buscar cada palavra no banco de dados:  Para cada palavra, o sistema vai procurar na tabela "palavras" se a palavra existe.
           Se a palavra estiver cadastrada, o sistema obtém o vídeo correspondente a essa palavra.

        4. Associar o vídeo da palavra encontrada:  Se a palavra exisitir no banco de dados, o sistema acessa a tabela de vídeos e obtém
           a URL do vídeo correspondente para exibir.

        5. Exibir o vídeo correspondente: Todos os vídeos relacionados às palavras inseridas pelo usuário são exibidos em sequencia na interface.

script:

const Palavra = require('../models/Palavra');
const Video = require('../models/Video');

exports.translate = async (req, res) => {
  const { text } = req.body;

  try {
    // Separar o texto em palavras
    const palavras = text.split(' ');

    // Array para armazenar as URLs dos vídeos
    let videoUrls = [];

    // Buscar cada palavra no banco de dados
    for (let palavra of palavras) {
      const palavraEncontrada = await Palavra.findOne({
        where: { palavra: palavra },
        include: Video, // Inclui o vídeo associado
      });

      if (palavraEncontrada && palavraEncontrada.Video) {
        videoUrls.push(palavraEncontrada.Video.url); // Adiciona a URL do vídeo
      }
    }

    // Renderiza a página com os vídeos correspondentes
    res.render('home', { videoUrls });
  } catch (error) {
    console.error("Erro ao buscar palavras no banco de dados: ", error);
    return res.status(500).send('Erro ao buscar palavras no banco de dados.');
  }
};



4. Rotas
!! Ainda esta sendo avaliado se irá ser necessário alterar ou adicionar uma rota nova. !!


5. Front-End:
(OBS: Não vamos mexer no front no 4Semestre, porém terá um sketch de como será feito a atualização.)

  - Caminho: /views/home.ejs
  - Propósito: Adaptação do front-end para exibir o vídeo correspondente à tradução realizada.

script:
<div class="videos">
  <% if (videoUrls && videoUrls.length > 0) { %>  <!-- Verifica se existem URLs de vídeo -->
    <% videoUrls.forEach(function(videoUrl) { %>   <!-- Loop para exibir cada vídeo -->
      <video controls>
        <source src="<%= videoUrl %>" type="video/mp4">  <!-- Exibe o vídeo -->
        Seu navegador não suporta o vídeo.
      </video>
    <% }) %>
  <% } else { %>
    <p>Nenhum vídeo correspondente encontrado.</p>  <!-- Caso nenhuma palavra seja encontrada -->
  <% } %>
</div>




6. Criação das Tabelas no Banco de dados

6.1 Tabela 'Video'
  - Caminho: /src/models/Video.js
  - Propósito: Modelo para a tabela 'videos' que armazena URLs de vídeos.

script:
const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/database');

class Video extends Model {}

Video.init({
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  url: { type: DataTypes.STRING, allowNull: false }
}, {
  sequelize, modelName: 'Video', tableName: 'videos'
});

module.exports = Video;



6.2 Tabela Palavra
  - Caminho: /src/models/Palavra.js
  - Propósito: Modelo para a tabela 'palavras' que armazena o texto e referencia o vídeo correspondente.

script:
const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/database');
const Video = require('./Video');

class Palavra extends Model {}

Palavra.init({
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  palavra: { type: DataTypes.STRING, allowNull: false },
  video_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: Video, key: 'id' }
  }
}, {
  sequelize, modelName: 'Palavra', tableName: 'palavras'
});

Palavra.belongsTo(Video, { foreignKey: 'video_id' });
module.exports = Palavra;



7. Sincronização com o Banco de dados
  - Caminho:  /index.js
  - Propósito:  Sincronizar os modelos com o banco de dados.

script:
const sequelize = require('./src/config/database');
const Video = require('./src/models/Video');
const Palavra = require('./src/models/Palavra');

sequelize.sync({ alter: true })
  .then(() => console.log("Banco de dados sincronizado com sucesso!"))
  .catch((error) => console.error("Erro ao sincronizar o banco de dados:", error));



Adaptando o backend, você vai buscar o vídeo correspondente à palavra ou frase que o usário digitar.
Se a palavra/frase exisitir no banco de dados, você retorna a URL do vídeo correspondente, como por exemplo em Controller > translateController.js:

      const Palavra = require('../models/Palavra');
      const Video = require('../models/Video');

      exports.translate = async (req, res) => {
        const { text } = req.body;

        try {
          // Busca a palavra no banco de dados
          const palavra = await Palavra.findOne({
            where: { palavra: text },
            include: Video // Inclui o vídeo associado
          });

          if (!palavra) {
            return res.status(404).send('Palavra não encontrada.');
          }

          // Retorna a URL do vídeo associado à palavra
          return res.render('home', { videoUrl: palavra.Video.url });
        } catch (error) {
          console.error("Erro ao buscar palavra no banco de dados: ", error);
          return res.status(500).send('Erro ao buscar palavra no banco de dados.');
        }
      };



8. Script Python para evitar palavras repetidas
  - Propósito: Script em python para remover palavras repetidas ao carregar uma tabela

script:
import pandas as pd

df = pd.read_csv('palavras.csv')
df_unique = df.drop_duplicates(subset=['palavra'])
df_unique.to_csv('palavras_unicas.csv', index=False)

print("Tabela sem palavras repetidas criada com sucesso!")


!!!  PESQUISAR COMO INTEGRAR O SCRIPT EM PYTHON PARA O PROJETO EM JAVASCRIPT !!!


Verificação Final

Todas vez que subir ou alterar algo no repositorio, verifique:
  - Banco de dados: Está configurado e acessível.
  - Conexão: O arquivo 'config/db.js' e 'config/database.js' estão configurados corretamente.
  - Arquivos necessários: Todos os arquivos mencionados foram criados ou subidos pro seu repositorio.
