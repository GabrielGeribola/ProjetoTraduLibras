<%- include('includes/head'); %>

<body>
  <main>
    <%- include('includes/navbar'); %>

    <div class="container-home" id="homeContent">
      <h2 class="translate-home">TRADUTOR</h2>

      <div class="digite-expressao">
        <p>Digite uma palavra ou express√£o ou grave sua voz:</p>
      </div>

      <form id="searchForm" class="input-group">
        <input type="text" class="input-home" id="input_text" name="input_text" placeholder="Exemplo: Abra√ßo">
        <button class="btn-home" type="submit">&gt;</button>
        <button type="button" class="btn-home" id="recordBtn">üé§ Gravar √Åudio</button>
      </form>

      <div class="resultado" id="result"></div>

      <div class="feedback-container" id="feedback" style="display: none;">
        <p>Esse era o resultado esperado?</p>
        <div class="feedback-buttons">
          <button onclick="enviarFeedback(true)" class="btn-feedback btn-sim">üëç Sim</button>
          <button onclick="enviarFeedback(false)" class="btn-feedback btn-nao">üëé N√£o</button>
        </div>
      </div>

      <div class="buttons-cards">
        <a href="/home" class="card-traduzir">
          <p class="icon-traduzir">üîÅ</p>
          <h3 class="title-card">Traduzir</h3>
          <p class="descricao-card">Converta palavras em Libras de forma r√°pida e intuitiva.</p>
        </a>
        <a href="/cursos" class="card-aprender">
          <p class="icon-aprender">üìñ</p>
          <h3 class="title-card">Aprender</h3>
          <p class="descricao-card">Descubra novos sinais e amplie seu conhecimento em Libras.</p>
        </a>
        <a href="/sugestoes" class="card-incluir">
          <p class="icon-incluir">ü§ó</p>
          <h3 class="title-card">Incluir</h3>
          <p class="descricao-card">Facilite a comunica√ß√£o e torne o di√°logo mais acess√≠vel.</p>
        </a>
      </div>
    </div>

    <!-- Chat din√¢mico (inicia escondido) -->
    <div id="chatWrapper" style="display: none">
      <div class="chat-container" id="chatContainer"></div>

      <!-- Form do chat com microfone ao lado da setinha -->
      <form id="chatForm" class="chat-input-container" style="display:flex; gap:8px; align-items:center;">
        <input type="text" class="input-home" id="chat_input" name="chat_input" placeholder="Digite aqui..." style="flex:1;">
        <button type="button" class="btn-home" id="chatRecordBtn" title="Gravar √°udio no chat">üé§</button>
        <button class="btn-home" type="submit" title="Enviar">‚Ä∫</button>
      </form>
    </div>

<script>
  // ---------- CONFIGURE AQUI a URL do backend Flask ----------
  // Troque a porta se necess√°rio (ex: 'http://localhost:5001')
  const API_BASE = 'http://localhost:5000';

  // debug
  console.log('DEBUG location.origin =', location.origin);
  console.log('DEBUG API_BASE =', API_BASE);

  let ultimaEntrada = ''
  let ultimaSugestao = ''
  let ultimoScore = 0.0
  let currentStream = null

  const resultDiv = document.getElementById('result')
  const feedbackDiv = document.getElementById('feedback')
  const homeContent = document.getElementById('homeContent')
  const chatWrapper = document.getElementById('chatWrapper')
  const chatContainer = document.getElementById('chatContainer')

  const searchForm = document.getElementById('searchForm')
  const chatForm = document.getElementById('chatForm')
  const chatInput = document.getElementById('chat_input')
  const recordBtn = document.getElementById('recordBtn')
  const chatRecordBtn = document.getElementById('chatRecordBtn')

  function appendMessage(content, sender = 'user', asHtml = false) {
    const msg = document.createElement('div');
    msg.classList.add('chat-bubble', sender);

    if (sender === 'bot' && asHtml) {
      msg.innerHTML = content;
    } else {
      msg.textContent = content;
    }

    chatContainer.appendChild(msg);
    chatContainer.scrollTop = chatContainer.scrollHeight;
  }

  // --- Envio de texto pelo input (inicial) ---
  searchForm.addEventListener('submit', async function (event) {
    event.preventDefault()
    const inputText = document.getElementById('input_text').value.trim()
    if (!inputText) return

    homeContent.style.display = 'none'
    chatWrapper.style.display = 'block'

    chatInput.value = inputText
    chatForm.dispatchEvent(new Event('submit'))
  })

  // --- Envio de texto pelo chat (setinha) ---
  chatForm.addEventListener('submit', async function (event) {
    event.preventDefault()
    const inputText = chatInput.value.trim()
    if (!inputText) return

    ultimaEntrada = inputText
    appendMessage(inputText, 'user')
    chatInput.value = ''

    try {
      const response = await fetch(`${API_BASE}/api/sugestao`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ texto: inputText })
      })

      let data;
      try {
        data = await response.json();
      } catch (err) {
        const text = await response.text();
        console.error('Resposta n√£o-JSON em /api/sugestao:', text);
        appendMessage('Erro do servidor ao buscar sugest√£o.', 'bot');
        return;
      }

      if (response.ok) {
        ultimaSugestao = data.expressao
        ultimoScore = data.score ?? 0.0

        const botMessage = `
          <p><strong>${data.expressao}</strong></p>
          <p>N√≠vel de confian√ßa: ${data.nivel_confianca}</p>
          <div class="video-container">
            <video controls>
              <source src="${data.url}" type="video/mp4">
              Seu navegador n√£o suporta v√≠deo.
            </video>
          </div>
          <div class="feedback-inline">
            <span>Esse era o resultado esperado?</span>
            <button onclick="enviarFeedback(true)">üëç</button>
            <button onclick="enviarFeedback(false)">üëé</button>
          </div>
        `
        appendMessage(botMessage, 'bot', true)
      } else {
        appendMessage(data.mensagem || 'Erro ao buscar express√£o.', 'bot')
      }
    } catch (err) {
      console.error(err)
      appendMessage('Erro de rede ao buscar express√£o.', 'bot')
    }
  })

  async function enviarFeedback(foiUtil) {
    try {
      const response = await fetch(`${API_BASE}/api/feedback`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          entrada: ultimaEntrada,
          sugestao: ultimaSugestao,
          score: ultimoScore,
          foi_util: foiUtil
        })
      })

      let data;
      try {
        data = await response.json();
      } catch (err) {
        console.error('Resposta n√£o-JSON em /api/feedback:', await response.text());
        appendMessage('Erro ao enviar feedback.', 'bot');
        return;
      }

      appendMessage(data.mensagem || 'Feedback recebido!', 'bot')
    } catch (err) {
      console.error(err)
      appendMessage('Erro ao enviar feedback.', 'bot')
    }
  }

  // --- Grava√ß√£o de √°udio da tela inicial ---
  recordBtn.addEventListener('click', async () => {
    // desabilita bot√£o enquanto grava
    recordBtn.disabled = true
    recordBtn.textContent = 'üéôÔ∏è Gravando...'

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      currentStream = stream
      const mediaRecorder = new MediaRecorder(stream);
      const chunks = [];

      mediaRecorder.ondataavailable = e => chunks.push(e.data);
      mediaRecorder.onstop = async () => {
        // libera o microfone
        try {
          if (currentStream) {
            currentStream.getTracks().forEach(t => t.stop());
            currentStream = null
          }
        } catch (e) {
          console.warn('Erro ao parar tracks:', e)
        }

        const blob = new Blob(chunks, { type: 'audio/webm' });
        const formData = new FormData();
        formData.append('file', blob, 'recording.webm');

        appendMessage('Enviando √°udio para transcri√ß√£o...', 'bot');

        let response;
        try {
          response = await fetch(`${API_BASE}/api/transcrever`, {
            method: 'POST',
            body: formData
          });
        } catch (err) {
          console.error('Erro de rede ao enviar √°udio:', err)
          appendMessage('Erro de rede ao enviar √°udio.', 'bot')
          recordBtn.disabled = false
          recordBtn.textContent = 'üé§ Gravar √Åudio'
          return
        }

        let data;
        // lidar com respostas n√£o-JSON ou HTML de erro
        if (response.ok) {
          try {
            data = await response.json();
          } catch (err) {
            const text = await response.text();
            console.error('Resposta inv√°lida (n√£o JSON) de /api/transcrever:', text);
            appendMessage('Resposta inv√°lida do servidor.', 'bot')
            recordBtn.disabled = false
            recordBtn.textContent = 'üé§ Gravar √Åudio'
            return;
          }
        } else {
          const text = await response.text();
          console.error('Erro do servidor em /api/transcrever:', text);
          appendMessage('Erro ao transcrever (status ' + response.status + ')', 'bot');
          recordBtn.disabled = false
          recordBtn.textContent = 'üé§ Gravar √Åudio'
          return;
        }

        if (data.texto) {
          // usa o mesmo fluxo de texto: coloca no input e dispara a busca
          homeContent.style.display = 'none'
          chatWrapper.style.display = 'block'
          chatInput.value = data.texto;
          appendMessage(`Transcri√ß√£o: "${data.texto}"`, 'bot');
          setTimeout(() => chatForm.dispatchEvent(new Event('submit')), 100);
        } else {
          appendMessage(data.mensagem || 'N√£o foi poss√≠vel transcrever o √°udio.', 'bot');
        }

        recordBtn.disabled = false
        recordBtn.textContent = 'üé§ Gravar √Åudio'
      };

      mediaRecorder.start();
      appendMessage('üé§ Gravando √°udio por 5 segundos...', 'bot');
      setTimeout(() => {
        if (mediaRecorder.state !== 'inactive') mediaRecorder.stop()
      }, 5000);
    } catch (err) {
      console.error(err);
      appendMessage('Permiss√£o negada ou erro ao acessar microfone.', 'bot');
      recordBtn.disabled = false
      recordBtn.textContent = 'üé§ Gravar √Åudio'
    }
  });

  // --- Grava√ß√£o de √°udio direto pelo chat (microfone ao lado da setinha) ---
  chatRecordBtn.addEventListener('click', async () => {
    chatRecordBtn.disabled = true;
    chatRecordBtn.textContent = 'üéôÔ∏è';

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      currentStream = stream;
      const mediaRecorder = new MediaRecorder(stream);
      const chunks = [];

      mediaRecorder.ondataavailable = e => chunks.push(e.data);
      mediaRecorder.onstop = async () => {
        // libera o microfone
        try { currentStream.getTracks().forEach(t => t.stop()); currentStream = null } catch(e){}

        const blob = new Blob(chunks, { type: 'audio/webm' });
        const formData = new FormData();
        formData.append('file', blob, 'chat_recording.webm');

        appendMessage('Enviando √°udio para transcri√ß√£o...', 'bot');

        let response;
        try {
          response = await fetch(`${API_BASE}/api/transcrever`, { method: 'POST', body: formData });
        } catch (err) {
          console.error('Erro de rede ao enviar √°udio:', err);
          appendMessage('Erro de rede ao enviar √°udio.', 'bot');
          chatRecordBtn.disabled = false;
          chatRecordBtn.textContent = 'üé§';
          return;
        }

        if (!response.ok) {
          const text = await response.text();
          console.error('Erro do servidor em /api/transcrever:', text);
          appendMessage('Erro ao transcrever (status ' + response.status + ')', 'bot');
          chatRecordBtn.disabled = false;
          chatRecordBtn.textContent = 'üé§';
          return;
        }

        let data;
        try {
          data = await response.json();
        } catch (err) {
          console.error('Resposta inv√°lida do servidor:', await response.text());
          appendMessage('Resposta inv√°lida do servidor.', 'bot');
          chatRecordBtn.disabled = false;
          chatRecordBtn.textContent = 'üé§';
          return;
        }

        if (data.texto) {
          // coloca o texto no input do chat e dispara submit
          homeContent.style.display = 'none';
          chatWrapper.style.display = 'block';
          chatInput.value = data.texto;
          appendMessage(`Transcri√ß√£o: "${data.texto}"`, 'bot');
          setTimeout(() => chatForm.dispatchEvent(new Event('submit')), 100);
        } else {
          appendMessage(data.mensagem || 'N√£o foi poss√≠vel transcrever o √°udio.', 'bot');
        }

        chatRecordBtn.disabled = false;
        chatRecordBtn.textContent = 'üé§';
      };

      // start & auto stop in 5s
      mediaRecorder.start();
      appendMessage('üé§ Gravando √°udio por 5 segundos...', 'bot');
      setTimeout(() => { if (mediaRecorder.state !== 'inactive') mediaRecorder.stop() }, 5000);

    } catch (err) {
      console.error(err);
      appendMessage('Permiss√£o negada ou erro ao acessar microfone.', 'bot');
      chatRecordBtn.disabled = false;
      chatRecordBtn.textContent = 'üé§';
    }
  });
</script>
</main>
</body>
